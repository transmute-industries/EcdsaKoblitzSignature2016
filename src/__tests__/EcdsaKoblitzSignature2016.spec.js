const jsigs = require("jsonld-signatures");
const { EcdsaKoblitzSignature2016 } = jsigs.suites;
const { PublicKeyProofPurpose } = jsigs.purposes;

const {
  linkedData,
  signedLinkedData1,
  bitcoinKeypair,
  testLoader,
  publicKeys,
  controller
} = require("./__fixtures__");

const { sign, verify } = require("../index");

describe("EcdsaKoblitzSignature2016", () => {
  it("can verify a signature generated by jsonld-signatures", async () => {
    const result = await verify({ data: signedLinkedData1 });
    expect(result.verified).toBe(true);
  });

  it("can sign and verify", async () => {
    let result = await sign({
      data: { ...linkedData },
      creator: `ecdsa-koblitz-pubkey:${bitcoinKeypair.address}`,
      privateKeyWIF: bitcoinKeypair.privateKey
    });
    expect(result.signature).toBeDefined();
    result = await verify({ data: result });
    expect(result.verified).toBe(true);
  });

  it("can verify a signature with jsonld-signatures", async () => {
    let result = await sign({
      data: { ...linkedData },
      creator: `ecdsa-koblitz-pubkey:${bitcoinKeypair.address}`,
      privateKeyWIF: bitcoinKeypair.privateKey
    });
    expect(result.signature).toBeDefined();
    result = await jsigs.verify(result, {
      documentLoader: testLoader,
      suite: new EcdsaKoblitzSignature2016({
        creator: publicKeys.aliceBtc.id,
        date: "2017-03-25T22:01:04Z"
      }),
      purpose: new PublicKeyProofPurpose({
        controller
      })
    });
    expect(result.verified).toBe(true);
  });
});
